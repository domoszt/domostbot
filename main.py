# -*- coding: utf-8 -*-

"""
Ponto de entrada principal para o Domost Bot.

Este script √© respons√°vel por:
1. Configurar o logging para monitoramento.
2. Carregar vari√°veis de ambiente (como o token do bot).
3. Definir as inten√ß√µes (Intents) e inicializar o cliente do bot.
4. Carregar todas as extens√µes (cogs) da pasta /cogs.
5. Implementar um manipulador de erros global.
6. Iniciar a conex√£o do bot com a API do Discord.
"""

# --- 1. Imports ---
import asyncio
import logging
import os
import traceback
from typing import NoReturn

import discord
from discord.ext import commands
from dotenv import load_dotenv

# --- 2. Configura√ß√£o do Logging ---
# Configura o logger para exibir logs no console e em um arquivo.
# Isso √© mais robusto que usar 'print()'.
log_formatter = logging.Formatter('%(asctime)s:%(levelname)s:%(name)s: %(message)s')
log_handler = logging.FileHandler(filename='domostbot.log', encoding='utf-8', mode='w')
log_handler.setFormatter(log_formatter)

stream_handler = logging.StreamHandler()
stream_handler.setFormatter(log_formatter)

logger = logging.getLogger('discord')
logger.setLevel(logging.INFO)
logger.addHandler(log_handler)
logger.addHandler(stream_handler)


# --- 3. Configura√ß√£o Inicial do Bot ---

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')

if not DISCORD_TOKEN:
    logger.critical("ERRO CR√çTICO: O 'DISCORD_TOKEN' n√£o foi encontrado no ambiente.")
    # Usar exit() aqui √© aceit√°vel, pois o bot n√£o pode funcionar sem o token.
    exit("Token n√£o configurado. O bot n√£o pode iniciar.")

# Define as permiss√µes (Intents) necess√°rias para o bot.
# √â uma boa pr√°tica solicitar apenas as intents que voc√™ realmente precisa.
intents = discord.Intents.default()
intents.message_content = True  # Necess√°rio para ler o conte√∫do das mensagens.
intents.members = True          # Necess√°rio para eventos de membros (entrada/sa√≠da).


# --- 4. Inicializa√ß√£o do Bot ---

class DomostBot(commands.Bot):
    """Subclasse de commands.Bot para adicionar atributos personalizados."""
    def __init__(self):
        super().__init__(command_prefix='!', intents=intents, help_command=None)
        # O Lock previne condi√ß√µes de corrida ao acessar/modificar
        # recursos compartilhados, como arquivos de economia.
        self.economy_lock = asyncio.Lock()

    async def setup_hook(self) -> None:
        """
        Hook que √© chamado ap√≥s o login, mas antes de se conectar ao WebSocket.
        Ideal para carregar extens√µes.
        """
        logger.info("Carregando extens√µes (cogs)...")
        for filename in os.listdir('./cogs'):
            if filename.endswith('.py'):
                cog_name = f'cogs.{filename[:-3]}'
                try:
                    await self.load_extension(cog_name)
                    logger.info(f'Cog "{cog_name}" carregado com sucesso.')
                except Exception as e:
                    # Usar exc_info=True anexa o traceback completo ao log.
                    logger.error(f'Erro ao carregar o Cog "{cog_name}".', exc_info=True)
    
    async def on_ready(self) -> None:
        """Evento disparado quando o bot est√° online e pronto."""
        logger.info(f'Login efetuado com sucesso como {self.user} (ID: {self.user.id})')
        logger.info('Bot est√° online e pronto.')
        logger.info('-----------------------------------------')


bot = DomostBot()


# --- 5. Manipulador de Erros Global ---

@bot.event
async def on_command_error(ctx: commands.Context, error: commands.CommandError) -> None:
    """
    Manipulador de erros global para todos os comandos.
    Captura, trata e loga os erros, fornecendo feedback ao usu√°rio.
    """
    # Desembrulha o erro original de exce√ß√µes como commands.CommandInvokeError
    causa_original = getattr(error, 'original', error)

    if isinstance(causa_original, commands.CommandOnCooldown):
        minutos, segundos = divmod(causa_original.retry_after, 60)
        tempo_restante = f"{int(minutos)}m {int(segundos)}s"
        embed = discord.Embed(
            title="‚úã Calma a√≠!",
            description=f"Voc√™ precisa esperar mais **{tempo_restante}**.",
            color=discord.Color.orange()
        )
        await ctx.send(embed=embed, delete_after=10)
    
    elif isinstance(causa_original, commands.MissingPermissions):
        await ctx.send(f"‚ùå {ctx.author.mention}, voc√™ n√£o tem permiss√£o para usar este comando!", delete_after=10)
    
    elif isinstance(causa_original, commands.NotOwner):
        await ctx.send("‚ùå Este √© um comando especial e s√≥ pode ser usado pelo meu criador!", delete_after=10)
    
    elif isinstance(causa_original, commands.CommandNotFound):
        # Ignora silenciosamente comandos que n√£o existem para evitar polui√ß√£o no chat.
        return
    
    else:
        # Para todos os outros erros, loga o traceback completo e avisa o usu√°rio.
        logger.error(f"Erro inesperado no comando '{ctx.command}' invocado por '{ctx.author}':", exc_info=causa_original)
        await ctx.send(f"üòµ Ocorreu um erro inesperado. A equipe de desenvolvimento j√° foi notificada!")


# --- 6. Ponto de Entrada Principal ---

async def main() -> None:
    """Fun√ß√£o principal para iniciar o bot."""
    async with bot:
        await bot.start(DISCORD_TOKEN)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot desligado pelo usu√°rio (Ctrl+C).")
    except Exception as e:
        logger.critical("Erro fatal ao iniciar o bot:", exc_info=True)